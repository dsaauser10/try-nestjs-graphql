# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProductAvgAggregate {
  id: Float
  price: Float
}

type ProductCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  price: Int!
  imageName: Int!
  imageURL: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  _all: Int!
}

type ProductMaxAggregate {
  id: Int
  name: String
  description: String
  price: Float
  imageName: String
  imageURL: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProductMinAggregate {
  id: Int
  name: String
  description: String
  price: Float
  imageName: String
  imageURL: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type ProductSumAggregate {
  id: Int
  price: Float
}

type Product {
  id: Int!
  name: String!
  description: String!
  price: Float!
  imageName: String!
  imageURL: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String
  user: User
}

type UserCountAggregate {
  id: Int!
  name: Int!
  email: Int!
  password: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserCount {
  products: Int!
}

type UserMaxAggregate {
  id: String
  name: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMinAggregate {
  id: String
  name: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  id: String!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]
  _count: UserCount!
}

type Query {
  """get all products"""
  productFindMany(where: ProductWhereInput, orderBy: [ProductOrderByWithRelationInput!], cursor: ProductWhereUniqueInput, take: Int, skip: Int, distinct: [ProductScalarFieldEnum!]): [Product!]

  """get a user by id"""
  userFindOne(where: UserWhereUniqueInput!): User

  """get all users"""
  userFindMany: [User!]
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  imageName: StringFilter
  imageURL: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
  user: UserNullableRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  name: StringFilter
  email: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  products: ProductListRelationFilter
}

input ProductListRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  price: SortOrder
  imageName: SortOrder
  imageURL: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrderInput
  user: UserOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input UserOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  products: ProductOrderByRelationAggregateInput
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductWhereUniqueInput {
  id: Int
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  imageName: StringFilter
  imageURL: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
  user: UserNullableRelationFilter
}

enum ProductScalarFieldEnum {
  id
  name
  description
  price
  imageName
  imageURL
  createdAt
  updatedAt
  userId
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  name: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  products: ProductListRelationFilter
}

type Mutation {
  """create a new product"""
  productCreateOne(data: ProductCreateInput!): Product

  """create a new user"""
  userCreateOne(data: UserCreateInput!): User
}

input ProductCreateInput {
  name: String!
  description: String!
  price: Float!
  imageName: String!
  imageURL: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProductsInput
}

input UserCreateNestedOneWithoutProductsInput {
  create: UserCreateWithoutProductsInput
  connectOrCreate: UserCreateOrConnectWithoutProductsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProductsInput {
  id: String
  name: String!
  email: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutProductsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProductsInput!
}

input UserCreateInput {
  id: String
  name: String!
  email: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutUserInput
}

input ProductCreateNestedManyWithoutUserInput {
  create: [ProductCreateWithoutUserInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutUserInput!]
  createMany: ProductCreateManyUserInputEnvelope
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutUserInput {
  name: String!
  description: String!
  price: Float!
  imageName: String!
  imageURL: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCreateOrConnectWithoutUserInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutUserInput!
}

input ProductCreateManyUserInputEnvelope {
  data: [ProductCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyUserInput {
  id: Int
  name: String!
  description: String!
  price: Float!
  imageName: String!
  imageURL: String!
  createdAt: DateTime
  updatedAt: DateTime
}